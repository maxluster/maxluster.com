---
title: Design Systems
subhead: Considering web design as a system can help designers communicate effectively across a diverse range of devices.
readLenMins: 5
date: 2013-08-30
---

img.constrained src="#{blog_asset_link "jobs.jpg"}"

markdown:
  *Over* six years ago, Apple released the first iPhone. With it came a paradigm shift in the way that people accessed the internet. Today there are thousands of devices that interpret and render the web, each with unique properties. [18% of the world's web usage](http://gs.statcounter.com/#mobile_vs_desktop-ww-monthly-200812-201309){:target="_blank"} now originates from mobile devices, up from less than 1% in 2009. This represents a major shift for designers and developers that produce content for the web. 

  For over two decades since the first web servers were turned on in 1991, desktop and notebook <abbr>PCs</abbr> dominated the share of access. Over that period, while internet technologies rapidly improved, input device and screen technologies remained relatively stagnant. Screens slowly increased in pixel resolution from <abbr>vga</abbr> 640×480 to <abbr>svga</abbr> 800×600, and finally to <abbr>xga</abbr> 1024×768. Web designers would consider the lowest screen resolution they would support, design their layouts to fit into the pixels of their minimum supported screen resolution, and leave a pool of remaining users behind to suffer a poor experience.

  Today's devices are far less predictable. Our sites and applications will be accessed on both tiny and massive screens. Boundaries between device categories are breaking down, too. At first it seems like we can divide the latest devices into three neat buckets: PCs, tablets, and mobile devices. But hybrid devices like Microsoft's *Surface*, large format phones like Samsung's *Galaxy Note*, and browers integrated into game consoles challenge today's conventional categories. The increase in diversity has made it clear to the web industry that we design for a canvas we do not control.

  ### Ideas and Forms

  *The* seeds of a flexible web that could respond to the unique properties of a device were planted with Ethan Marcotte's 2010 *[Responsive Web Design](http://alistapart.com/article/responsive-web-design)*. <abbr>Rwd</abbr> provides us with tools and techniques that aim to preserve the underlying *idea* of a website as it is rendered across different devices by creating a range of distinct design outputs, or *forms*, tailored to the properties of the host device. In application, <abbr>css3</abbr>'s media query acts as part of a larger system that translates the idea of a site into its output form.

  While <abbr>rwd</abbr> is a recent innovation, design systems that separate *idea* from *form* are rooted in print media. In the following video, Jonathan Hoefler of [HF&J](http://www.typography.com), describes the design system that Penguin Books used to create countless of their iconic covers.

.video.constrained
  iframe width="640" height="360" modestbranding="1" src="http://www.youtube.com/embed/LfdtmwIZ-3c?rel=0" frameborder="0"

markdown:
  Systems similar to Penguin's have been at play on the web for much longer than <abbr>rwd</abbr>. Consider Content Management Systems like WordPress or Drupal, the core of most informational web sites. An editor supplies the required content to their <abbr>cms</abbr> and a new page is quickly created. We wouldn't say that the editor *designed* the page. Instead, we'd say that they leveraged a design system&mdash;the underlying rules of the system encoded in the website's templates, grid system, typography, and behavior. 

  No matter which underlying technologies are used to produce a page, when a user requests a <abbr>url</abbr>, the data representation for the page is encoded in three components. 

  1. HyperText Markup Language (<abbr>html</abbr>) &ndash; *Content & Markup* 
  2. Cascading Style Sheets (<abbr>css</abbr>) &ndash; *Layout, Typography, & Visual Language*
  3. JavaScript (<abbr>js</abbr>) &ndash; *Behavior & Interaction*

  This information, the output of the design system, is passed to the user's device where it takes on a life of its own. Browsers work to interpret this data and render the page, each with their own set of rules on how to do so. The browser works with the computer's <abbr>os</abbr> to send rendering instructions to the device's screen. Finally, the screen interprets the data to produce a grid of pixels &mdash; the *idea*, takes on its *form*.

  ### Designing for The Screen

  *When* a site lacks a mechanism for anticipating and responding to the properties of a user's device, the idea underpinning the site's design is often lost.

figure
  figcaption Sites built on the <a href="http://www.960.gs">960 Grid System</a> become unreadable on small screens.
  img.narrow src="#{blog_asset_link "drupal-iphone.jpg"}"


markdown:
  A design system &mdash; a grid, rules for typography, templates for content &mdash; drives the creation of&nbsp;&nbsp;[drupal.org](http://www.drupal.org). But the idea of the design, it's architecture and sense of scale, is lost in the form it takes on the iPhone. In order for the design to hold up it needs rules for how to adapt. 

aside Consider that designs can adapt to more than just a screen's resolution. Designers can anticipate and respond to many other factors.

markdown:
  To designers new to <abbr>rwd</abbr> the list of variables that impact a user's experience of a website can be overwhemling. There are explicit properties such as the physical dimensions of the user's screen, its pixel density, its color accuracy, its browser's rendering technology, it's operating system. There are also implicit variables such as the users's viewing distance, their ambient lighting conditions, other tasks they're pursuing side-by-side.

  Fortunately, this lengthy list of considerations can be reduced to a more managable set. Jonathan Hoefler explains in another clip from his <a href="#"><abbr>aiga</abbr> lecture</a>:

.video.constrained
  iframe width="640" height="360" modestbranding="1" src="//www.youtube.com/embed/jYcIdpcT-QA?rel=0" frameborder="0"

markdown:
  Hoefler was refering to HF&J's considerations have created to preserve the *idea* of their fonts on *The Screen*, but it seems that these four considerations are universal to all design systems:

  1. Media
  2. Scale
  3. Application &ndash; 
  4. Environment &ndash; *Constraints of the web's underlying technologies (HTML, CSS, JS)*

  What separates web designs


  #### In a *pixel-perfect* design system, no information is passed from the device to the design system

.constrained
  .panel.red
    img src="#{blog_asset_link "ds1.png"}"  

markdown:
  This is what happens when the iPhone renders a site designed on a fixed pixel grid onto a small screen.

  #### In a *responsive* design system, information about the device is used by the design system to tailor it's output for that device

.constrained
  .panel.blue
    img src="#{blog_asset_link "ds2.png"}"

markdown:
  This is what happens when the iPhone renders a site designed on a fixed pixel grid onto a small screen.

  ## Properties of The Screen

  It's easy to see that the system that Penguin applied to create it's book covers has also been at play on the web. Consider reusable templates, the core of most informational web sites. An editor supplies the required content to their <abbr>cms</abbr>, and with no intervention from the site's designer or developer a new page is created. Yet we wouldn't say that the editor *designed* the page. Instead, we'd say that the editor leveraged a design system, with the underlying idea of the design encoded in the website's templated markup, grid system, visuals, and behavior.

  It's easy to see that the system that Penguin applied to create it's book covers has also been at play on the web. Consider reusable templates, the core of most informational web sites. An editor supplies the required content to their <abbr>cms</abbr>, and with no intervention from the site's designer or developer a new page is created. Yet we wouldn't say that the editor *designed* the page. Instead, we'd say that the editor leveraged a design system, with the underlying idea of the design encoded in the website's templated markup, grid system, visuals, and behavior.