/*  -----------------------------------------------------------------------------
	::  HELPER MIXINS
	::
	::	Define global helper mixins.
	----------------------------------------------------------------------------- */


/*  -----------------------------------------------------------------------------
  ::  Attach stylable Pseudo Classes to an object
  ----------------------------------------------------------------------------- */

@mixin before{
  position: relative;
  &:before{
    content: "";
    display: block;
    position: absolute;
    @content;
  }
}

@mixin after{
  position: relative;
  &:after{
    content: "";
    display: block;
    position: absolute;
    @content;
  }
}


/*  -----------------------------------------------------------------------------
	::  SELECTOR SETS
	----------------------------------------------------------------------------- */

// TODO: remove
@mixin type{
	h1, h2, h3, h4, h5, h6, p, td{
		@content;
	}
}

@mixin headers{
	h1, h2, h3, h4, h5, h6{
		@content;
	}
}

@mixin bodyFont{
	p, td, th{
		@content;
	}
}

/*  -----------------------------------------------------------------------------
  ::  Color
  ----------------------------------------------------------------------------- */

// Applies a color overlay to a container
@mixin overlay($color){
  position: relative;
  &:after{
    content: "";
    display: block;
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0;
    background: $color;
  }
}

@mixin clearfix{
  &:after{
    content:"";
    display:table;
    clear:both;
  }
}


/*  -----------------------------------------------------------------------------
  ::  Type
  ----------------------------------------------------------------------------- */
@mixin old-style-figures{
  -moz-font-feature-settings: "onum=1, pnum=1";
  -ms-font-feature-settings: "onum", "pnum";
  -webkit-font-feature-settings: "onum", "pnum";
  -o-font-feature-settings: "onum", "pnum";
  font-feature-settings: "onum", "pnum";
}


@mixin baseline($property, $divisions, $baselineDefault: $baselineDefault, $baselines: $baselines) {
  // Recalculate baselines. Pull this into a memoized function
  @each $breakpoint, $baseline in $baselines {
    $baselines: map-merge($baselines, ($breakpoint: $divisions * $baseline / $baselineDivisions));
  }
  @include responsive(#{$property}, $baselineDefault, $baselines);
}
